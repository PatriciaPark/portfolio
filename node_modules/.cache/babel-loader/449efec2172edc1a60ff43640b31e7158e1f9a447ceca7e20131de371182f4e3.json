{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\portfolio\\\\src\\\\games\\\\BrickGirlRT.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BrickGirlRT = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const spriteRef = useRef(new Image());\n\n  // 스프라이트 설정\n  const frameWidth = 335;\n  const frameHeight = 512;\n  const numCols = 3;\n  const numRows = 2;\n  const scale = 0.2;\n  const frameX = useRef(0);\n  const frameY = useRef(0); // 0: 걷기, 1: 점프 시로 변경 예정\n  const frameCount = useRef(0);\n  const [spriteLoaded, setSpriteLoaded] = useState(false);\n\n  // 캐릭터 위치 및 점프 관련 변수\n  let girlX = 50; // 브릭걸 초기 X 좌표 (고정된 위치)\n  let girlY = 0; // 초기값은 일단 0으로\n  // let girlX = 50;\n  // let girlY = 300;\n  let isJumping = false;\n  let velocityY = 0;\n  const gravity = 0.8;\n  let jumpCount = 0; // 현재 점프 횟수 (0~2)\n  const maxJumps = 2;\n\n  // 벽돌 배열 추가\n  const bricks = useRef([]);\n\n  // 지형(타일) 데이터 배열 만들기\n  const scrollSpeed = 2; // 배경 스크롤 속도\n  const tileSize = 50;\n  const groundTiles = useRef([]);\n  const levelData = [{\n    x: 0,\n    y: 350\n  },\n  // 땅\n  {\n    x: 50,\n    y: 350\n  }, {\n    x: 100,\n    y: 350\n  }, {\n    x: 150,\n    y: 350\n  }, {\n    x: 200,\n    y: 350\n  },\n  // 간격\n  {\n    x: 250,\n    y: 350\n  }, {\n    x: 300,\n    y: 350\n  }, {\n    x: 350,\n    y: 350\n  }, {\n    x: 400,\n    y: 350\n  }, {\n    x: 450,\n    y: 350\n  },\n  // 높은 지형\n  {\n    x: 500,\n    y: 300\n  }, {\n    x: 550,\n    y: 300\n  }, {\n    x: 600,\n    y: 250\n  }, {\n    x: 650,\n    y: 250\n  }, {\n    x: 700,\n    y: 200\n  }, {\n    x: 750,\n    y: 200\n  }];\n\n  // 초기 타일 30개 정도 생성\n  useEffect(() => {\n    const tiles = [];\n    for (let i = 0; i < 30; i++) {\n      tiles.push({\n        x: i * tileSize,\n        y: 350,\n        type: 'ground'\n      });\n    }\n    groundTiles.current = levelData.map(tile => ({\n      ...tile,\n      type: 'ground'\n    }));\n  }, []);\n\n  // 브릭걸의 바닥 충돌 체크 함수\n  const isOnGround = () => {\n    // 브릭걸의 발 아래 위치\n    const feetX = girlX + frameWidth * scale / 2;\n    const feetY = girlY + frameHeight * scale;\n    return groundTiles.current.some(tile => {\n      const tileBottom = tile.y;\n      return feetX > tile.x && feetX < tile.x + tileSize && feetY >= tileBottom && feetY <= tileBottom + 10 // 작은 여유\n      ;\n    });\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let animationFrameId;\n\n    // 캔버스 사이즈 설정\n    canvas.width = 800;\n    canvas.height = 400;\n\n    // 스프라이트 이미지 로드\n    spriteRef.current.src = process.env.PUBLIC_URL + '/brickgirl_sprite.png';\n    spriteRef.current.onload = () => {\n      setSpriteLoaded(true);\n\n      // 바닥 타일 중 브릭걸 아래에 있는 타일 찾기\n      const standingTile = groundTiles.current.find(tile => girlX + frameWidth * scale / 2 > tile.x && girlX + frameWidth * scale / 2 < tile.x + tileSize);\n      if (standingTile) {\n        girlY = standingTile.y - frameHeight * scale;\n      }\n    };\n\n    // 키보드 이벤트 처리\n    const handleKeyDown = e => {\n      if (e.code === 'Space') {\n        e.preventDefault(); // 스페이스바 스크롤 방지\n        throwBrick();\n      } else if (e.code === 'ArrowUp') {\n        if (jumpCount < maxJumps) {\n          velocityY = -12 * (jumpCount === 1 ? 1.2 : 1); // 2단 점프는 더 높이\n          isJumping = true;\n          jumpCount++;\n        }\n      }\n    };\n\n    // 모바일 터치 조작\n    const handleTouchStart = e => {\n      const touchX = e.touches[0].clientX;\n      if (touchX < canvas.width / 2) {\n        // 왼쪽 터치 → 점프\n        if (!isJumping) {\n          isJumping = true;\n          velocityY = -12;\n        }\n      } else {\n        // 오른쪽 터치 → 공격\n        throwBrick();\n      }\n    };\n\n    // 애니메이션 프레임 업데이트\n    const updateFrame = () => {\n      frameCount.current++;\n      if (frameCount.current % 10 === 0) {\n        frameX.current = (frameX.current + 1) % numCols;\n      }\n    };\n\n    // 그리기\n    const draw = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // --- 바닥 타일 스크롤 ---\n      groundTiles.current.forEach(tile => {\n        tile.x -= scrollSpeed; // ← 왼쪽으로 스크롤\n        ctx.fillStyle = 'saddlebrown'; // 타일 색상\n        ctx.fillRect(tile.x, tile.y, tileSize, tileSize);\n      });\n      if (girlY > canvas.height) {\n        console.log('Game Over!');\n        // 리셋 처리 or 종료\n      }\n\n      // 착지 로직\n      if (isOnGround()) {\n        isJumping = false;\n        velocityY = 0;\n\n        // 브릭걸 Y 위치 정확히 바닥 위로 스냅\n        const landingTile = groundTiles.current.find(tile => girlX + frameWidth * scale / 2 > tile.x && girlX + frameWidth * scale / 2 < tile.x + tileSize && girlY + frameHeight * scale >= tile.y);\n        if (landingTile) {\n          girlY = landingTile.y - frameHeight * scale;\n        }\n      } else {\n        // 중력 적용\n        velocityY += gravity;\n        girlY += velocityY;\n      }\n      const lastTile = groundTiles.current[groundTiles.current.length - 1];\n      if (lastTile.x < canvas.width) {\n        groundTiles.current.push({\n          x: lastTile.x + tileSize,\n          y: 350,\n          type: 'ground'\n        });\n      }\n\n      // 스프라이트 그리기\n      if (spriteLoaded) {\n        updateFrame();\n        ctx.drawImage(spriteRef.current, frameX.current * frameWidth, frameY.current * frameHeight, frameWidth, frameHeight, girlX, girlY, frameWidth * scale, frameHeight * scale);\n      } else {\n        // 대체 이미지 (로딩 전)\n        ctx.fillStyle = 'hotpink';\n        ctx.fillRect(girlX, girlY, 30, 30);\n      }\n\n      // 벽돌 그리기 + 이동\n      ctx.font = \"16px Arial\";\n      bricks.current.forEach((brick, index) => {\n        // 위치 업데이트 (포물선)\n        brick.x += brick.vx;\n        brick.vy += gravity * 0.5; // 중력 영향\n        brick.y += brick.vy;\n\n        // 벽돌 그리기\n        ctx.fillText('🧱', brick.x, brick.y);\n\n        // 화면 밖으로 나가면 제거\n        if (brick.x > canvas.width || brick.y > canvas.height) {\n          bricks.current.splice(index, 1);\n        }\n      });\n      animationFrameId = requestAnimationFrame(draw);\n    };\n\n    // 초기 설정\n    window.addEventListener('keydown', handleKeyDown);\n    canvas.addEventListener('touchstart', handleTouchStart);\n    draw();\n\n    // 정리 함수\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      canvas.removeEventListener('touchstart', handleTouchStart);\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [spriteLoaded]);\n\n  // 벽돌 던지기 함수\n  const throwBrick = () => {\n    // 브릭걸 손에서 날아가는 초기 위치\n    const startX = girlX + 30;\n    const startY = girlY + 10;\n\n    // 초기 속도 설정 (포물선)\n    const vx = 6 + Math.random(); // 속도 조금 랜덤하게\n    const vy = -8; // 위로 튀어나가는 각도\n\n    // 벽돌 하나 추가\n    bricks.current.push({\n      x: startX,\n      y: startY,\n      vx,\n      vy\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Brick Girl: Run & Throw\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        border: '2px solid #999'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u2B06\\uFE0F: Jump / Space: \\uD83E\\uDDF1 (\\uBAA8\\uBC14\\uC77C\\uC740 \\uD654\\uBA74 \\uC88C\\uC6B0 \\uD130\\uCE58)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 9\n  }, this);\n};\n_s(BrickGirlRT, \"Gj6TxhEDBiWqwQeP4VdFoG7093g=\");\n_c = BrickGirlRT;\nexport default BrickGirlRT;\nvar _c;\n$RefreshReg$(_c, \"BrickGirlRT\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","BrickGirlRT","_s","canvasRef","spriteRef","Image","frameWidth","frameHeight","numCols","numRows","scale","frameX","frameY","frameCount","spriteLoaded","setSpriteLoaded","girlX","girlY","isJumping","velocityY","gravity","jumpCount","maxJumps","bricks","scrollSpeed","tileSize","groundTiles","levelData","x","y","tiles","i","push","type","current","map","tile","isOnGround","feetX","feetY","some","tileBottom","canvas","ctx","getContext","animationFrameId","width","height","src","process","env","PUBLIC_URL","onload","standingTile","find","handleKeyDown","e","code","preventDefault","throwBrick","handleTouchStart","touchX","touches","clientX","updateFrame","draw","clearRect","forEach","fillStyle","fillRect","console","log","landingTile","lastTile","length","drawImage","font","brick","index","vx","vy","fillText","splice","requestAnimationFrame","window","addEventListener","removeEventListener","cancelAnimationFrame","startX","startY","Math","random","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","border","_c","$RefreshReg$"],"sources":["C:/workspace/portfolio/src/games/BrickGirlRT.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\n\r\nconst BrickGirlRT = () => {\r\n    const canvasRef = useRef(null);\r\n    const spriteRef = useRef(new Image());\r\n\r\n    // 스프라이트 설정\r\n    const frameWidth = 335;\r\n    const frameHeight = 512;\r\n    const numCols = 3;\r\n    const numRows = 2;\r\n    const scale = 0.2;\r\n\r\n    const frameX = useRef(0);\r\n    const frameY = useRef(0); // 0: 걷기, 1: 점프 시로 변경 예정\r\n    const frameCount = useRef(0);\r\n    const [spriteLoaded, setSpriteLoaded] = useState(false);\r\n\r\n    // 캐릭터 위치 및 점프 관련 변수\r\n    let girlX = 50; // 브릭걸 초기 X 좌표 (고정된 위치)\r\n    let girlY = 0;  // 초기값은 일단 0으로\r\n    // let girlX = 50;\r\n    // let girlY = 300;\r\n    let isJumping = false;\r\n    let velocityY = 0;\r\n    const gravity = 0.8;\r\n    let jumpCount = 0; // 현재 점프 횟수 (0~2)\r\n    const maxJumps = 2;\r\n\r\n    // 벽돌 배열 추가\r\n    const bricks = useRef([]);\r\n\r\n    // 지형(타일) 데이터 배열 만들기\r\n    const scrollSpeed = 2; // 배경 스크롤 속도\r\n    const tileSize = 50;\r\n    const groundTiles = useRef([]);\r\n    const levelData = [\r\n        { x: 0, y: 350 },   // 땅\r\n        { x: 50, y: 350 },\r\n        { x: 100, y: 350 },\r\n        { x: 150, y: 350 },\r\n        { x: 200, y: 350 },\r\n        // 간격\r\n        { x: 250, y: 350 },\r\n        { x: 300, y: 350 },\r\n        { x: 350, y: 350 },\r\n        { x: 400, y: 350 },\r\n        { x: 450, y: 350 },\r\n        // 높은 지형\r\n        { x: 500, y: 300 },\r\n        { x: 550, y: 300 },\r\n        { x: 600, y: 250 },\r\n        { x: 650, y: 250 },\r\n        { x: 700, y: 200 },\r\n        { x: 750, y: 200 },\r\n    ];\r\n\r\n\r\n    // 초기 타일 30개 정도 생성\r\n    useEffect(() => {\r\n        const tiles = [];\r\n        for (let i = 0; i < 30; i++) {\r\n            tiles.push({ x: i * tileSize, y: 350, type: 'ground' });\r\n        }\r\n        groundTiles.current = levelData.map((tile) => ({\r\n            ...tile,\r\n            type: 'ground',\r\n        }));\r\n    }, []);\r\n\r\n    // 브릭걸의 바닥 충돌 체크 함수\r\n    const isOnGround = () => {\r\n        // 브릭걸의 발 아래 위치\r\n        const feetX = girlX + (frameWidth * scale) / 2;\r\n        const feetY = girlY + frameHeight * scale;\r\n\r\n        return groundTiles.current.some((tile) => {\r\n            const tileBottom = tile.y;\r\n            return (\r\n                feetX > tile.x &&\r\n                feetX < tile.x + tileSize &&\r\n                feetY >= tileBottom &&\r\n                feetY <= tileBottom + 10 // 작은 여유\r\n            );\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        let animationFrameId;\r\n\r\n        // 캔버스 사이즈 설정\r\n        canvas.width = 800;\r\n        canvas.height = 400;\r\n\r\n        // 스프라이트 이미지 로드\r\n        spriteRef.current.src = process.env.PUBLIC_URL + '/brickgirl_sprite.png';\r\n        spriteRef.current.onload = () => {\r\n            setSpriteLoaded(true);\r\n\r\n            // 바닥 타일 중 브릭걸 아래에 있는 타일 찾기\r\n            const standingTile = groundTiles.current.find((tile) =>\r\n                girlX + (frameWidth * scale) / 2 > tile.x &&\r\n                girlX + (frameWidth * scale) / 2 < tile.x + tileSize\r\n            );\r\n\r\n            if (standingTile) {\r\n                girlY = standingTile.y - frameHeight * scale;\r\n            }\r\n        };\r\n\r\n        // 키보드 이벤트 처리\r\n        const handleKeyDown = (e) => {\r\n            if (e.code === 'Space') {\r\n                e.preventDefault(); // 스페이스바 스크롤 방지\r\n                throwBrick();\r\n            } else if (e.code === 'ArrowUp') {\r\n                if (jumpCount < maxJumps) {\r\n                    velocityY = -12 * (jumpCount === 1 ? 1.2 : 1); // 2단 점프는 더 높이\r\n                    isJumping = true;\r\n                    jumpCount++;\r\n                }\r\n            }\r\n        };\r\n\r\n        // 모바일 터치 조작\r\n        const handleTouchStart = (e) => {\r\n            const touchX = e.touches[0].clientX;\r\n\r\n            if (touchX < canvas.width / 2) {\r\n                // 왼쪽 터치 → 점프\r\n                if (!isJumping) {\r\n                    isJumping = true;\r\n                    velocityY = -12;\r\n                }\r\n            } else {\r\n                // 오른쪽 터치 → 공격\r\n                throwBrick();\r\n            }\r\n        };\r\n\r\n        // 애니메이션 프레임 업데이트\r\n        const updateFrame = () => {\r\n            frameCount.current++;\r\n            if (frameCount.current % 10 === 0) {\r\n                frameX.current = (frameX.current + 1) % numCols;\r\n            }\r\n        };\r\n\r\n        // 그리기\r\n        const draw = () => {\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n            // --- 바닥 타일 스크롤 ---\r\n            groundTiles.current.forEach((tile) => {\r\n                tile.x -= scrollSpeed; // ← 왼쪽으로 스크롤\r\n                ctx.fillStyle = 'saddlebrown';  // 타일 색상\r\n                ctx.fillRect(tile.x, tile.y, tileSize, tileSize);\r\n            });\r\n            if (girlY > canvas.height) {\r\n                console.log('Game Over!');\r\n                // 리셋 처리 or 종료\r\n            }\r\n\r\n            // 착지 로직\r\n            if (isOnGround()) {\r\n                isJumping = false;\r\n                velocityY = 0;\r\n\r\n                // 브릭걸 Y 위치 정확히 바닥 위로 스냅\r\n                const landingTile = groundTiles.current.find(tile =>\r\n                    girlX + (frameWidth * scale) / 2 > tile.x &&\r\n                    girlX + (frameWidth * scale) / 2 < tile.x + tileSize &&\r\n                    girlY + frameHeight * scale >= tile.y\r\n                );\r\n                if (landingTile) {\r\n                    girlY = landingTile.y - frameHeight * scale;\r\n                }\r\n            } else {\r\n                // 중력 적용\r\n                velocityY += gravity;\r\n                girlY += velocityY;\r\n            }\r\n\r\n            const lastTile = groundTiles.current[groundTiles.current.length - 1];\r\n            if (lastTile.x < canvas.width) {\r\n                groundTiles.current.push({\r\n                    x: lastTile.x + tileSize,\r\n                    y: 350,\r\n                    type: 'ground',\r\n                });\r\n            }\r\n\r\n            // 스프라이트 그리기\r\n            if (spriteLoaded) {\r\n                updateFrame();\r\n                ctx.drawImage(\r\n                    spriteRef.current,\r\n                    frameX.current * frameWidth,\r\n                    frameY.current * frameHeight,\r\n                    frameWidth,\r\n                    frameHeight,\r\n                    girlX,\r\n                    girlY,\r\n                    frameWidth * scale,\r\n                    frameHeight * scale\r\n                );\r\n            } else {\r\n                // 대체 이미지 (로딩 전)\r\n                ctx.fillStyle = 'hotpink';\r\n                ctx.fillRect(girlX, girlY, 30, 30);\r\n            }\r\n\r\n            // 벽돌 그리기 + 이동\r\n            ctx.font = \"16px Arial\";\r\n            bricks.current.forEach((brick, index) => {\r\n                // 위치 업데이트 (포물선)\r\n                brick.x += brick.vx;\r\n                brick.vy += gravity * 0.5; // 중력 영향\r\n                brick.y += brick.vy;\r\n\r\n                // 벽돌 그리기\r\n                ctx.fillText('🧱', brick.x, brick.y);\r\n\r\n                // 화면 밖으로 나가면 제거\r\n                if (brick.x > canvas.width || brick.y > canvas.height) {\r\n                    bricks.current.splice(index, 1);\r\n                }\r\n            });\r\n\r\n\r\n            animationFrameId = requestAnimationFrame(draw);\r\n        };\r\n\r\n        // 초기 설정\r\n        window.addEventListener('keydown', handleKeyDown);\r\n        canvas.addEventListener('touchstart', handleTouchStart);\r\n        draw();\r\n\r\n        // 정리 함수\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyDown);\r\n            canvas.removeEventListener('touchstart', handleTouchStart);\r\n            cancelAnimationFrame(animationFrameId);\r\n        };\r\n    }, [spriteLoaded]);\r\n\r\n    // 벽돌 던지기 함수\r\n    const throwBrick = () => {\r\n        // 브릭걸 손에서 날아가는 초기 위치\r\n        const startX = girlX + 30;\r\n        const startY = girlY + 10;\r\n\r\n        // 초기 속도 설정 (포물선)\r\n        const vx = 6 + Math.random(); // 속도 조금 랜덤하게\r\n        const vy = -8; // 위로 튀어나가는 각도\r\n\r\n        // 벽돌 하나 추가\r\n        bricks.current.push({ x: startX, y: startY, vx, vy });\r\n    };\r\n\r\n    return (\r\n        <div style={{ textAlign: 'center' }}>\r\n            <h2>Brick Girl: Run & Throw</h2>\r\n            <canvas ref={canvasRef} style={{ border: '2px solid #999' }} />\r\n            <p>⬆️: Jump / Space: 🧱 (모바일은 화면 좌우 터치)</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BrickGirlRT;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}